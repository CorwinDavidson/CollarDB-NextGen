$module ()

$import lib.CommonVariables.lslm ();
$import lib.stringFunctions.lslm ();

//dummy function
integer llScaleByFactor(float resize_scale)
{
	if (resize_scale >= 1.0)
	{
		return TRUE;
	}
	else
	{
		return FALSE;
	}
}

//#mdebug info
Debug (string sStr)
{

		llOwnerSay(llGetScriptName() + ": " + sStr);
}
//#enddebug

string String2Json(string s)
{
    return llGetSubString(llList2Json(JSON_OBJECT, [s,""]), 1, -5);
}

key Dialog(key kRCPT, string sPrompt, list lChoices, list lUtilityButtons, integer iPage)
{
    key kID = llGenerateKey();
    llMessageLinked(LINK_SET, DIALOG_REQUEST,"{\"DIALOG\":[" + String2Json(kRCPT) + "," + String2Json(sPrompt) + "," + (string)iPage + "," +  String2Json( llDumpList2String(lChoices, "`")) + "," + String2Json(llDumpList2String(lUtilityButtons, "`")) + "]}",kID);
    return kID;
}

integer KeyIsAv(key kID)
{
    return llGetAgentSize(kID) != ZERO_VECTOR;
}

Notify(key kID, string sMsg, integer iAlsoNotifyWearer) 
{
    if (kID == g_kWearer) 
    {
        llOwnerSay(sMsg);
    } 
    else 
    {
    	if (KeyIsAv(kID))
    	{
    		llRegionSayTo(kID,0,sMsg);
    	}
    	else
    	{
        	llInstantMessage(kID,sMsg);
    	}
        
        if (iAlsoNotifyWearer) 
        {
            llOwnerSay(sMsg);
        }
    }
}


NotifyOwners(string sMsg)
{
    integer n;
    integer iStop = llGetListLength(getAuthList(OWNERLIST,FALSE));
    for (n = 0; n < iStop; n += 2)
    {
        if (g_kWearer != llGetOwner())
        {
            return;
        }
        else
        {
	        key kOwner = (key)llList2String(getAuthList(OWNERLIST,FALSE), n);
	        if (kOwner != g_kWearer)
	        {
				Notify(kOwner, sMsg, FALSE);	        	
	        } 
        }   	
    }
}


string AutoPrefix()
{
    list sName = llParseString2List(llKey2Name(llGetOwner()), [" "], []);
    return llToLower(llGetSubString(llList2String(sName, 0), 0, 0)) + llToLower(llGetSubString(llList2String(sName, 1), 0, 0));
}

string GetDBPrefix()
{//get db prefix from list in object desc
    return llList2String(llParseString2List(llGetObjectDesc(), ["~"], []), 2);
}

integer GetChannelByKey(key kID, integer iAppID)
{
    return 0x80000000 | ((integer)("0x"+(string)kID) ^ iAppID);
}


/*-------------------**
** Cache Functions   **
**-------------------*/

integer CacheValExists(list cache, string sToken)
{
    return ~llListFindList(cache, [sToken]);
}

list SetCacheVal(list cache, string sToken, string sValue, integer iOffset)
{
    integer iIndex = llListFindList(cache, [sToken]);
    if (iIndex == -1)
    {
        cache += [sToken] + llListReplaceList(g_lCacheTemplate, [sValue], iOffset, iOffset);
    }
    else
    {
        cache = llListReplaceList(cache, [sValue], iIndex + iOffset, iIndex + iOffset);
    }
    return cache;
}

string GetCacheVal(list cache, string sToken, integer iOffset)
{
    integer iIndex = llListFindList(cache, [sToken]);
    if (iIndex != -1)
    {
    	return llList2String(cache, iIndex + iOffset);
    }
    else
    { 
    	return "";
    }
}

list DelCacheVal(list cache, string sToken, integer iValCnt)
{
    integer iIndex = llListFindList(cache, [sToken]);
    if (iIndex != -1)
    {
        cache = llDeleteSubList(cache, iIndex, iIndex + iValCnt);
    }
    return cache;
}

// AUTH Functions
setAuthList(integer iList, list lAuthList)
{
    integer iMax = llGetListLength(lAuthList);
    integer iHalf = 0;
    
    if (iMax > 2)
    {
         iHalf = iMax / 2;
         llSetLinkMedia(LINK_THIS,iList+1,[PRIM_MEDIA_HOME_URL,llDumpList2String(llList2List(lAuthList,0,iHalf-1),"|"),PRIM_MEDIA_WHITELIST,llDumpList2String(llList2List(lAuthList,iHalf,iMax),"|"),PRIM_MEDIA_PERMS_CONTROL,PRIM_MEDIA_PERM_NONE,PRIM_MEDIA_PERMS_INTERACT,PRIM_MEDIA_PERM_NONE]);
    }
    else if (iMax == 2)
    {
        llSetLinkMedia(LINK_THIS,iList+1,[PRIM_MEDIA_HOME_URL,llDumpList2String(lAuthList,"|"),PRIM_MEDIA_WHITELIST,"",PRIM_MEDIA_PERMS_CONTROL,PRIM_MEDIA_PERM_NONE,PRIM_MEDIA_PERMS_INTERACT,PRIM_MEDIA_PERM_NONE]);
    }
    else
    {
    	llSetLinkMedia(LINK_THIS,iList+1,[PRIM_MEDIA_HOME_URL,"",PRIM_MEDIA_WHITELIST,"",PRIM_MEDIA_PERMS_CONTROL,PRIM_MEDIA_PERM_NONE,PRIM_MEDIA_PERMS_INTERACT,PRIM_MEDIA_PERM_NONE]);
    }
}

list getAuthList(integer iList, integer iLowercase)
{
	string sList = (string)llGetLinkMedia(LINK_THIS,iList+1,[PRIM_MEDIA_HOME_URL]) + "|" + (string)llGetLinkMedia(LINK_THIS,iList+1,[PRIM_MEDIA_WHITELIST]);
	if (iLowercase)
	{
		sList = llToLower(sList);
	}
    return llParseString2List(sList,["|"],[]);
}

string dumpList(integer iListID)
{
        list lPeople;
        lPeople = getAuthList(iListID,FALSE);
        integer n;
        integer iLength = llGetListLength(lPeople);
        string sOutput;
        for (n = 0; n < iLength; n = n + 2)
        {
            sOutput += "\n" + llList2String(lPeople, n + 1) + " (" + llList2String(lPeople, n) + ")";
        }
        return sOutput;
}

string dumpBool(integer iBool)
{
	list lBool =["FALSE","TRUE"];
   	return llList2String(lBool,iBool);
}

integer CheckAuth(string kID, integer iMinAuth, integer iMaxAuth, integer iObject)
{
	integer iUserAuth = UserAuth(kID, iObject);
//#mdebug info
	Debug((string)iUserAuth + "|" + (string)getAuthList(OWNERLIST,FALSE));
//#enddebug	
	if ( ( iUserAuth >= iMinAuth ) &&  ( iUserAuth <= iMaxAuth ))
	{
		return iUserAuth;
	}
	else
	{
		return FALSE;
	}
}

integer UserAuth(string kID, integer iObject)
{
	key kObject = NULL_KEY;
    // If this is an Object, use the Owner key for Auth
    if (iObject)
    {
        kObject = kID;
        kID = (string)llGetOwnerKey(kObject);
    }
	integer iWearerLocksOut = (integer)((string)llGetLinkMedia(LINK_THIS,0,[PRIM_MEDIA_AUTO_LOOP]));
	integer iOpenAccess = (integer)((string)llGetLinkMedia(LINK_THIS,0,[PRIM_MEDIA_AUTO_SCALE]));
	integer iGroupEnabled = (integer)((string)llGetLinkMedia(LINK_THIS,0,[PRIM_MEDIA_AUTO_ZOOM]));
	key kGroup = (string)llGetLinkMedia(LINK_THIS,0,[PRIM_MEDIA_WHITELIST]);
	
    integer iNum;
    
    if (iWearerLocksOut && kID == (string)g_kWearer)
    {
        iNum = COMMAND_WEARERLOCKEDOUT;
    }
    else if (~llListFindList(getAuthList(OWNERLIST,FALSE), [(string)kID]))
    {
        iNum = COMMAND_OWNER;
    }
    else if (llGetListLength(getAuthList(OWNERLIST,FALSE)) == 0 && kID == (string)g_kWearer)
    {
        //if no owners set, then wearer's cmds have owner auth
        iNum = COMMAND_OWNER;
    }
    else if (~llListFindList(getAuthList(BLACKLIST,FALSE), [(string)kID]))
    {
        iNum = COMMAND_BLACKLIST;
    }
    else if (~llListFindList(getAuthList(SECOWNERLIST,FALSE), [(string)kID]))
    {
        iNum = COMMAND_SECOWNER;
    }
    else if (kID == (string)g_kWearer)
    {
        iNum = COMMAND_WEARER;
    }
    else if (iOpenAccess)
    {
        if (in_range((key)kID))
            iNum = COMMAND_GROUP;
        else
            iNum = COMMAND_EVERYONE;
    }
    else if (iGroupEnabled)
    {
        if (iObject)
        {
            if (((string)llGetObjectDetails(kObject, [OBJECT_GROUP]) == (string)kGroup) && (kID != g_kWearer))
            {
                iNum = COMMAND_GROUP;
            }
        }
        else {
            if (llSameGroup(kID) && iGroupEnabled && kID != (string)g_kWearer)
            {
                if (in_range((key)kID))
                    iNum = COMMAND_GROUP;
                else
                    iNum = COMMAND_EVERYONE;
            }        
        }
    }
    else
    {
        iNum = COMMAND_EVERYONE;
    }
    return iNum;
}

integer in_range(key kID) {
	integer iLimitRange = (integer)((string)llGetLinkMedia(LINK_THIS,1,[PRIM_MEDIA_AUTO_ZOOM]));
    if (iLimitRange) {
        integer range = 20;
        vector kAvpos = llList2Vector(llGetObjectDetails(kID, [OBJECT_POS]), 0);
        if (llVecDist(llGetPos(), kAvpos) > range) {
            llDialog(kID, "\n\nNot in range...", [], 298479);
            return FALSE;
        }
        else {
            return TRUE;
        }
    }
    else {
        return TRUE;
    }
}
